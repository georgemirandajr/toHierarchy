strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
pred <- predict(fit, test, cutoff = c(0.70, 0.25))
table(pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(110, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
pred <- predict(fit, test)
table(pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")
cm
37/722
37/nrow(test)
describe(data_predictors$Murder)
16566/128
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(129, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
pred <- predict(fit, test)
table(pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")
cm
sensitivity <- cm$byClass[1]  # True Positive Rate - .3829787
specificity <- cm$byClass[2]  # True Negative Rate - .9549932
FN <- cm$table[3]  # False Negatives
FP <- cm$table[2]  # False Positives
cond_pos <- sum(cm$table[,2])  # All Positive cases
cond_neg <- sum(cm$table[,1])  # All Negative cases
FNR <- FN / cond_pos  # 0.6170213  False Negatives / All Positives
FPR <- FP / cond_neg  # 0.04500682  False Positives / All Negatives
FNR
FPR
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
pred <- predict(fit, test)
table(pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
sensitivity <- cm$byClass[1]  # True Positive Rate - .3829787
specificity <- cm$byClass[2]  # True Negative Rate - .9549932
FN <- cm$table[3]  # False Negatives
FP <- cm$table[2]  # False Positives
cond_pos <- sum(cm$table[,2])  # All Positive cases
cond_neg <- sum(cm$table[,1])  # All Negative cases
FNR <- FN / cond_pos  # 0.6170213  False Negatives / All Positives
FPR <- FP / cond_neg  # 0.04500682  False Positives / All Negatives
FNR
FPR
rm(train2)
rm(train.roughfix)
rm(nz)
varImpPlot(fit)
round(importance(fit), 2)
?importance
round(importance(fit, type = 1), 2)
test$Murder<- ordered(test$Murder)  # response variable
pred <- ordered(pred)  # predictor variable
# Create the ROC curve using pROC package.
ROC <- pROC::roc(response = test$Murder, predictor = pred, levels = levels(test$Murder))
# Plot the ROC curve and get the area under the curve. The area under the curve is 0.6944, which refers to
pROC::plot.roc(ROC, col = rgb(1, 0, 0, .5), lwd = 2)  # AUC = 0.7986
FNR
FPR
partialPlot(fit, train, x.var = Age, which.class = 1)
pred <- predict(fit, test, type = "prob")
table(pred, test$Murder)
View(pred)
View(test)
test$pred <- predict(fit, test)
View(test)
test$prob <- predict(fit, test, type = "prob")
View(test)
View(pred)
test <- select(test, -prob)
test$prob_0 <- predict(fit, test, type = "prob")
View(test)
View(filter(test, Murder==0 & pred == 1))
test <- select(test, -prob_0)
prob_0 <- predict(fit, test, type = "prob")
rm(pred)
rm(prob_0)
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob_0[,1]
test$prob_0 <- prob[,1]
test$prob_1 <- prob[,2]
View(test)
View(filter(test, Murder==0 & pred == 1))
View(filter(test, Murder==1 & pred == 0))
10/15
fp <- filter(test, Murder==0 & pred == 1)
sum(fp$Gang/nrow(fp))
sum(as.numeric(fp$Gang)/nrow(fp))
sum(as.numeric(fp$Gang))/nrow(fp)
sum(as.numeric(fp$Gang))
sum(as.numeric(fp$Murder))
sum(as.integer(fp$Murder))
describe(fp$Gang)
View(fp)
fn <- filter(test, Murder==1 & pred == 0)
View(fn)
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob[,1]
test$prob_1 <- prob[,2]
table(test$pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm <- caret::confusionMatrix(table(test$pred, test$Murder), positive = "1")  # Produce a confusion matrix
pred <- predict(fit, test, cutoff = c(0.70, 0.30))   # Same as above, just it's own object
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
View(test)
View(test)
fn <- filter(test, Murder==1 & pred == 0)
fp <- filter(test, Murder==0 & pred == 1)
View(fn)
length(unique(aps$XNUMBER))
6677+10017
xTbl <- data.frame(table(aps$XNUMBER))
View(xTbl)
View(aps[which(aps$XNUMBER %in% xTbl$Var1 & xTbl$Freq > 1),])
xTbl <- xTbl[xTbl$Freq > 1, ]
View(aps[which(aps$XNUMBER %in% xTbl$Var1),])
describe(aps$Income)
median(aps$Income)
mean(aps$Income)
?log
hist(aps$Income)
hist(log(aps$Income))
aps$Income_Log <- log(aps$Income)
View(aps)
data_predictors <- aps %>%
dplyr::select(Murder, Age, White, Male, Total_Pop, Black_Pop, Prop_Black, Income, Zip_Present, Gang, ViolentCase, Income_Log)
toConvert <- c("Murder", "White", "Male", "Zip_Present", "Gang", "ViolentCase")
data_predictors[,toConvert] <- lapply(data_predictors[,toConvert], factor)
set.seed(1001)
inTrain <- createDataPartition(data_predictors$Murder,
p = 0.6,
list = FALSE,
times = 1)
train <- data_predictors[inTrain,]
test <- data_predictors[-inTrain,]
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase + Income_Log,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
pred <- predict(fit, test, cutoff = c(0.70, 0.30))   # Same as above, just it's own object
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob[,1]
test$prob_1 <- prob[,2]
table(test$pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Zip_Present + ViolentCase + Income_Log,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
pred <- predict(fit, test, cutoff = c(0.70, 0.30))   # Same as above, just it's own object
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob[,1]
test$prob_1 <- prob[,2]
table(test$pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")
cm
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
pred <- predict(fit, test, cutoff = c(0.70, 0.30))   # Same as above, just it's own object
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob[,1]
test$prob_1 <- prob[,2]
table(test$pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")
cm
set.seed(1001)
inTrain <- createDataPartition(data_predictors$Murder,
p = 0.6,
list = FALSE,
times = 1)
train <- data_predictors[inTrain,]
test <- data_predictors[-inTrain,]
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
pred <- predict(fit, test, cutoff = c(0.70, 0.30))   # Same as above, just it's own object
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob[,1]
test$prob_1 <- prob[,2]
table(test$pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
saveRDS(aps, file = "aps.rds")
saveRDS(train, file = "train.rds")
saveRDS(test, file = "test.rds")
setwd("~/PredictingMurderers")
aps <- readRDS("aps.rds")
aps <- readRDS("aps.rds")
View(aps)
library(dplyr)
aps <- aps %>% select(-SPLIT, -CaseNumber, -XNUMBER, -DefLastName, -DefFirstName, -AreaOffice, -CITY, -`ZIP CODE`, -DPONo, -DPOLastName, -DPOFirstName, -SDPOLastName, -SDPOFirstName, -DOB, -RACE, -CII, -FBI, -SSN, -`CDC 1`, -DpoConc, -`CLOSING DISPO CODE`, -DESCRIPTION)
aps <- select(aps, -`DEF STTS`)
aps <- select(aps, -LEVEL)
aps <- select(aps, -CASELOAD)
aps <- select(aps, -CurrentCaseStatus)
aps <- select(aps, -GENDER)
aps <- select(aps, -CaseStatus)
aps <- select(aps, -CaseExpiration)
saveRDS(aps, file = "aps.rds")
prop.table(table(aps$White, aps$Murder), 1)
prop.table(table(aps$Male, aps$Murder), 1)
prop.table(table(aps$Age, aps$Murder), 1)
nz <- caret::nearZeroVar(aps, saveMetrics = TRUE)
nz$variable <- 1:nrow(nz)
View(nz)
toConvert <- c("Murder", "White", "Male", "Zip_Present", "Gang", "ViolentCase", "WeaponCase")
data_predictors <- aps %>%
dplyr::select(Murder, Age, White, Male, Total_Pop, Black_Pop, Prop_Black, Income, Zip_Present, Gang, ViolentCase, Income_Log, WeaponCase)
data_predictors[,toConvert] <- lapply(data_predictors[,toConvert], factor)
set.seed(1001)
inTrain <- createDataPartition(data_predictors$Murder,
p = 0.6,
list = FALSE,
times = 1)
train <- data_predictors[inTrain,]
test <- data_predictors[-inTrain,]
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase+ WeaponCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
pred <- predict(fit, test, cutoff = c(0.70, 0.30))   # Same as above, just it's own object
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob[,1]
test$prob_1 <- prob[,2]
table(test$pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
varImpPlot(fit)
range(inbag_sums)
range(inbag)
View(inbag)
ncol(inbag)
nrow(inbag)
mean(inbag_sums)
fit <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 2000,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
pred <- predict(fit, test, cutoff = c(0.70, 0.30))   # Same as above, just it's own object
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob[,1]
test$prob_1 <- prob[,2]
table(test$pred, test$Murder)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
sqrt(7)
install.packages("markovchain")
install.packages("RWeka")
saveRDS(fit, "theModel2.0.rds")
aps <- readRDS("aps.rds")
library(Hmisc)
train <- readRDS("train.rds")
test <- readRDS("test.rds")
prop.table(table(aps$White, aps$Murder), 1)
prop.table(table(aps$Male, aps$Murder), 1)
prop.table(table(aps$Age, aps$Murder), 1)
View(aps)
data_predictors <- aps %>%
dplyr::select(Murder, Age, White, Male, Total_Pop, Black_Pop, Prop_Black, Income, Zip_Present, Gang, ViolentCase, Income_Log, WeaponCase)
packages <- c("dplyr", "Hmisc", "randomForest", "caret")
sapply(packages, require, character.only = TRUE)
data_predictors <- aps %>%
dplyr::select(Murder, Age, White, Male, Total_Pop, Black_Pop, Prop_Black, Income, Zip_Present, Gang, ViolentCase, Income_Log, WeaponCase)
toConvert <- c("Murder", "White", "Male", "Zip_Present", "Gang", "ViolentCase", "WeaponCase")
data_predictors[,toConvert] <- lapply(data_predictors[,toConvert], factor)
set.seed(1001)
fit <- randomForest(Murder ~ Age + White + Male + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + Gang + ViolentCase + Income_Log + WeaponCase,
data = train,
importance = TRUE,
ntree = 1500,
na.action = na.roughfix)
toConvert <- c("Murder", "White", "Male", "Zip_Present", "Gang", "ViolentCase")
data_predictors[,toConvert] <- lapply(data_predictors[,toConvert], factor)
fit <- randomForest(Murder ~ Age + White + Male + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + Gang + ViolentCase + Income_Log,
data = train,
importance = TRUE,
ntree = 1500,
na.action = na.roughfix)
fit
pred <- predict(fit, test, cutoff = c(0.70, 0.30))
pred <- predict(fit, test)
cm <- caret::confusionMatrix(table(pred, test$Murder), positive = "1")
cm
# Create the ROC curve using pROC package.
ROC <- pROC::roc(response = test$Murder, predictor = pred, levels = levels(test$Murder))
test$Murder<- ordered(test$Murder)  # response variable
pred <- ordered(pred)  # predictor variable
ROC <- pROC::roc(response = test$Murder, predictor = pred, levels = levels(test$Murder))
pROC::plot.roc(ROC, col = rgb(1, 0, 0, .5), lwd = 2)  # AUC = 0.8008
sqrt(7)
varImpPlot(fit)
round(importance(fit), 2)
describe(aps$Male)
describe(factor(aps$Male))
describe(factor(aps$White))
describe(factor(aps$Gang))
fit2 <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit2
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
cm <- caret::confusionMatrix(table(test$pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
View(test)
test <- readRDS("test.rds")
set.seed(1001)
inTrain <- createDataPartition(data_predictors$Murder,
p = 0.6,
list = FALSE,
times = 1)
train <- data_predictors[inTrain,]
test <- data_predictors[-inTrain,]
fit2 <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit2
test$pred <- predict(fit, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
cm <- caret::confusionMatrix(table(test$pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
varImpPlot(fit2)
round(importance(fit), 2)
round(importance(fit2), 2)
test$Murder<- ordered(test$Murder)  # response variable
test$pred <- ordered(test$pred)  # predictor variable
ROC <- pROC::roc(response = test$Murder, predictor = test$pred, levels = levels(test$Murder))
pROC::plot.roc(ROC, col = rgb(1, 0, 0, .5), lwd = 2)  # AUC = 0.8008
set.seed(1001)
inTrain <- createDataPartition(data_predictors$Murder,
p = 0.6,
list = FALSE,
times = 1)
train <- data_predictors[inTrain,]
test <- data_predictors[-inTrain,]
fit2 <- randomForest(Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Zip_Present + ViolentCase,
data = train,
importance = TRUE,
ntree = 1500,
mtry = 1,
cutoff = c(0.65, 0.30),
classwt = c(125, 1),
sampsize = c("0" = 100, "1" = 34),
strata = as.factor(train$Murder),
keep.inbag = TRUE,
na.action = na.roughfix)
fit2
test$pred <- predict(fit2, test, cutoff = c(0.70, 0.30))  # Predicted Outcome
cm <- caret::confusionMatrix(table(test$pred, test$Murder), positive = "1")  # Produce a confusion matrix
cm
prob <- predict(fit, test, type = "prob")  # Probability matrix for both outcomes
test$prob_0 <- prob[,1]  # Probability of not being a murderer
test$prob_1 <- prob[,2]  # Probability of being a murderer
cm2 <- caret::confusionMatrix(table(test$pred, test$Murder), positive = "1")  # Produce a confusion matrix
sensitivity <- cm2$byClass[1]  # True Positive Rate - .3829787
specificity <- cm2$byClass[2]  # True Negative Rate - .9549932
FN <- cm2$table[3]  # False Negatives
FP <- cm2$table[2]  # False Positives
cond_pos <- sum(cm2$table[,2])  # All Positive cases
cond_neg <- sum(cm2$table[,1])  # All Negative cases
FNR <- FN / cond_pos  # 0.2941176  False Negatives / All Positives
FPR <- FP / cond_neg  # 0.1043149  False Positives / All Negatives
FPR
FNR
FPR/FNR
FNR/FPR
FN/FP
FP/FN
cm
cm2
varImpPlot(fit2)
test$Murder<- ordered(test$Murder)  # response variable
test$pred <- ordered(test$pred)  # predictor variable
ROC <- pROC::roc(response = test$Murder, predictor = test$pred, levels = levels(test$Murder))
pROC::plot.roc(ROC, col = rgb(1, 0, 0, .5), lwd = 2)  # AUC = 0.8008
partialPlot(fit2, train, x.var = Age, which.class = 1)
LSCMI <- aps %>% select(Murder, `LSCMI SCORE`)
LSCMI$grp <- ifelse(LSCMI$`LSCMI SCORE` >= 0 & LSCMI$`LSCMI SCORE`<=10, "Low",
ifelse(LSCMI$`LSCMI SCORE` > 10 & LSCMI$`LSCMI SCORE` <= 20, "Med",
ifelse(LSCMI$`LSCMI SCORE` > 20 & LSCMI$`LSCMI SCORE` <= 30, "High", "Ultra High")
)
)
LSCMI$grp <- factor(LSCMI$grp, ordered = TRUE, levels = c("Low", "Med", "High", "Ultra High"))
table(LSCMI$grp, LSCMI$Murder)  # this shows that if High or Ultra High were used as a predictive model, there would be a high number of false positives, despite being able to predict 68% of murders. This means that more resources would need to be poured in to preventative programs because the LSCMI model is unable to accurately distinguish murderers from non-murderers. More importantly, there is an extremely high rate of false negatives that would go unflagged (32% when combining Low and Medium). Compare that to the random forest model which has less than 1% false negative rate. In other words, the LSCMI score is unable to efficiently predict without overcompensating.
1+38+75+8
aps$Murder
sum(aps$Murder)
1+38+75+8
sum(LSCMI$Murder)
table(LSCMI$grp, LSCMI$Murder)
describe(LSCMI$`LSCMI SCORE`)
8/128
logit <- glm(formula = Murder ~ Age + Total_Pop + Black_Pop + Prop_Black + Income + Gang + Zip_Present + ViolentCase, family = "binomial", data = train)
test2 <- test  # copy the test set
test2$MurderP <- predict(logit, newdata = test2, type = "response")
any(test2$MurderP>0.5)  # there are none that had a 50% or higher probability of being a murderer
length(which(test2$MurderP>0.25))  # 3 observations
describe(test2$Murder)
8/51
cm2$table
37/51
saveRDS(fit2, "fit2.rds")
